type: edu
files:
- name: resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: src/chat/Main.java
  visible: true
  text: |
    package chat;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/ChatTests.java
  visible: false
  text: |
    import com.microsoft.playwright.*;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.junit.After;
    import org.junit.Before;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.regex.Pattern;
    import java.util.stream.Stream;

    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class ChatTests extends SpringTest {
        final static Random random = new Random();
        final static Pattern dateLengthPattern = Pattern.compile(".{5,}");
        final static Pattern overflowPattern = Pattern.compile("^(auto|scroll)$");
        final static int TIMEOUT = 10_000;
        final static int NUM_OF_MESSAGES = 7;
        final static String URL = "http://localhost:28852";
        final static String TITLE = "Chat";

        final static String INPUT_MSG_ID_SELECTOR = "#input-msg";
        final static String INPUT_USERNAME_ID_SELECTOR = "#input-username";
        final static String SEND_MSG_BTN_ID_SELECTOR = "#send-msg-btn";
        final static String SEND_USERNAME_BTN_ID_SELECTOR = "#send-username-btn";
        final static String MESSAGES_ID_SELECTOR = "#messages";
        final static String MESSAGE_CONTAINER_CLASS_SELECTOR = ".message-container";
        final static String SENDER_CLASS_SELECTOR = ".sender";
        final static String MESSAGE_CLASS_SELECTOR = ".message";
        final static String DATE_CLASS_SELECTOR = ".date";
        final static String INCORRECT_OR_MISSING_TITLE_TAG_ERR = "tag \"title\" should have correct text";

        final static String[] USERNAMES = {
                "A_USER_" + random.nextInt(1000, 10000),
                "B_USER_" + random.nextInt(1000, 10000),
                "C_USER_" + random.nextInt(1000, 10000),
        };
        final static String[] RANDOM_MESSAGES = Stream
                .generate(ChatTests::generateRandomMessage)
                .limit(NUM_OF_MESSAGES)
                .toArray(String[]::new);

        final static ArrayList<String[]> sentMessagesWithSenders = new ArrayList<>();

        Playwright playwright;
        Browser browser;
        List<Page> pages = new ArrayList<>();

        @Before
        public void initBrowser() {
            playwright = Playwright.create();

            browser = playwright.firefox().launch(
                    new BrowserType
                            .LaunchOptions()
                            .setHeadless(false)
    //                        .setSlowMo(15)
                            .setTimeout(1000 * 120));
        }

        @After
        public void closeBrowser() {
            if (playwright != null) {
                playwright.close();
            }
        }

        // Helper functions
        static Page openNewPage(String url, Browser browser, int defaultTimeout) {
            Page page = browser.newContext().newPage();
            page.navigate(url);
            page.setDefaultTimeout(defaultTimeout);
            return page;
        }

        static String generateRandomMessage() {
            return "Test message " + random.nextInt();
        }

        // Tests

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{

                // --- LOGIN TESTS WITH TWO USERS
                // user 0
                () -> {
                    pages.add(openNewPage(URL, browser, TIMEOUT));
                    return correct();
                },
                () -> testShouldContainProperTitle(pages.get(0), TITLE),
                () -> testElementShouldBeHidden(pages.get(0), INPUT_MSG_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(0), SEND_MSG_BTN_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(0), MESSAGES_ID_SELECTOR),
                () -> testFillInputField(pages.get(0), USERNAMES[0], INPUT_USERNAME_ID_SELECTOR),
                () -> testPressBtn(pages.get(0), SEND_USERNAME_BTN_ID_SELECTOR),

                // user 1
                () -> {
                    pages.add(openNewPage(URL, browser, TIMEOUT));
                    return correct();
                },
                () -> testShouldContainProperTitle(pages.get(1), TITLE),
                () -> testElementShouldBeHidden(pages.get(1), INPUT_MSG_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(1), SEND_MSG_BTN_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(1), MESSAGES_ID_SELECTOR),
                () -> testFillInputField(pages.get(1), USERNAMES[1], INPUT_USERNAME_ID_SELECTOR),
                () -> testPressBtn(pages.get(1), SEND_USERNAME_BTN_ID_SELECTOR),

                // --- CHAT TESTS WITH TWO USERS
                () -> testElementShouldBeHidden(pages.get(0), INPUT_USERNAME_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(1), INPUT_USERNAME_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(0), SEND_USERNAME_BTN_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(1), SEND_USERNAME_BTN_ID_SELECTOR),
                // message 0
                () -> testFillInputField(pages.get(0), RANDOM_MESSAGES[0], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[0], RANDOM_MESSAGES[0]});
                    return testPressBtn(pages.get(0), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),
                // message 1
                () -> testFillInputField(pages.get(1), RANDOM_MESSAGES[1], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[1], RANDOM_MESSAGES[1]});
                    return testPressBtn(pages.get(1), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                // message 2
                () -> testFillInputField(pages.get(0), RANDOM_MESSAGES[2], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[0], RANDOM_MESSAGES[2]});
                    return testPressBtn(pages.get(0), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),
                // message 3
                () -> testFillInputField(pages.get(1), RANDOM_MESSAGES[3], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[1], RANDOM_MESSAGES[3]});
                    return testPressBtn(pages.get(1), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                // message 4
                () -> testFillInputField(pages.get(0), RANDOM_MESSAGES[4], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[0], RANDOM_MESSAGES[4]});
                    return testPressBtn(pages.get(0), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),

                // --- TESTS WITH THREE USERS
                // user 2
                () -> {
                    pages.add(openNewPage(URL, browser, TIMEOUT));
                    return correct();
                },
                () -> testElementShouldBeHidden(pages.get(2), INPUT_MSG_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(2), SEND_MSG_BTN_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(2), MESSAGES_ID_SELECTOR),
                () -> testFillInputField(pages.get(2), USERNAMES[2], INPUT_USERNAME_ID_SELECTOR),
                () -> testPressBtn(pages.get(2), SEND_USERNAME_BTN_ID_SELECTOR),

                () -> testElementShouldBeHidden(pages.get(2), INPUT_USERNAME_ID_SELECTOR),
                () -> testElementShouldBeHidden(pages.get(2), SEND_USERNAME_BTN_ID_SELECTOR),

                // message 5
                () -> testFillInputField(pages.get(2), RANDOM_MESSAGES[5], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[2], RANDOM_MESSAGES[5]});
                    return testPressBtn(pages.get(2), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(2), sentMessagesWithSenders),

                // message 6
                () -> testFillInputField(pages.get(2), RANDOM_MESSAGES[6], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessagesWithSenders.add(new String[]{USERNAMES[2], RANDOM_MESSAGES[6]});
                    return testPressBtn(pages.get(2), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessagesWithSenders),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(2), sentMessagesWithSenders),
        };

        CheckResult testShouldContainProperTitle(Page page, String title) {
            return title.equals(page.title()) ? correct() : wrong(INCORRECT_OR_MISSING_TITLE_TAG_ERR);
        }

        CheckResult testElementShouldBeHidden(Page page, String elemSelector) {
            try {
                assertThat(page.locator(elemSelector)).isHidden();
                return correct();
            } catch (AssertionError e) {
                return wrong(e.getMessage());
            }
        }

        CheckResult testFillInputField(Page page, String msg, String inputFieldSelector) {
            try {
                assertThat(page.locator(inputFieldSelector)).isEmpty();
                page.fill(inputFieldSelector, msg);
                return correct();
            } catch (PlaywrightException | AssertionError e) {
                return wrong(e.getMessage());
            }
        }

        CheckResult testPressBtn(Page page, String btnSelector) {
            try {
                page.click(btnSelector);
                return correct();
            } catch (PlaywrightException e) {
                return wrong(e.getMessage());
            }
        }

        CheckResult testUserMessagesShouldHaveProperStructureAndContent(Page page, List<String[]> sentMessagesWithSenders) {
            Locator messageContainersLocator = page.locator(MESSAGES_ID_SELECTOR).locator(MESSAGE_CONTAINER_CLASS_SELECTOR);

            try {
                assertThat(page.locator(MESSAGES_ID_SELECTOR)).hasCSS("overflow-y", overflowPattern);
                assertThat(messageContainersLocator).hasCount(sentMessagesWithSenders.size());

                for (int i = 0; i < sentMessagesWithSenders.size(); i++) {
                    Locator messageContainerLocator = messageContainersLocator.nth(i);

                    assertThat(messageContainerLocator.locator(SENDER_CLASS_SELECTOR)).isVisible();
                    assertThat(messageContainerLocator.locator(MESSAGE_CLASS_SELECTOR)).isVisible();
                    assertThat(messageContainerLocator.locator(DATE_CLASS_SELECTOR)).isVisible();

                    assertThat(messageContainerLocator.locator(SENDER_CLASS_SELECTOR)).hasCount(1);
                    assertThat(messageContainerLocator.locator(MESSAGE_CLASS_SELECTOR)).hasCount(1);
                    assertThat(messageContainerLocator.locator(DATE_CLASS_SELECTOR)).hasCount(1);

                    assertThat(messageContainerLocator.locator(SENDER_CLASS_SELECTOR)).hasText(sentMessagesWithSenders.get(i)[0]);
                    assertThat(messageContainerLocator.locator(MESSAGE_CLASS_SELECTOR)).hasText(sentMessagesWithSenders.get(i)[1]);
                    assertThat(messageContainerLocator.locator(DATE_CLASS_SELECTOR)).hasText(dateLengthPattern);
                }

                return correct();
            } catch (AssertionError e) {
                return wrong(e.getMessage());
            }
        }
    }
  learner_created: false
- name: resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <link rel="stylesheet" href="style.css">
        <meta charset="UTF-8">
        <script src="https://kit.fontawesome.com/f2f28d363d.js" crossorigin="anonymous"></script>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Chat</title>
    </head>

    <body>
    <div id="title-section">
        <h1 class="messenger-title">Messenger</h1><h3 class="messenger-title-description">chat with others online</h3>
    </div>

    <div id="chatbox">
        <div id="messages">

        </div>

        <div id="input-message">
            <input type="text" id="input-msg" placeholder="Type a message">
            <button id="send-msg-btn" type="submit" onclick="getMessage()"><img src="send-message-btn.png" alt=""></button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <script src="logic.js"></script>
    </body>

    </html>
  learner_created: true
- name: src/chat/ChatController.java
  visible: true
  text: |
    package chat;

    import org.springframework.messaging.handler.annotation.MessageMapping;
    import org.springframework.messaging.handler.annotation.Payload;
    import org.springframework.messaging.handler.annotation.SendTo;
    import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
    import org.springframework.stereotype.Controller;

    @Controller
    public class ChatController {

        @MessageMapping("/message")
        @SendTo("/topic/messages")
        public String sendMessage(String message) {
            return message;
        }


    }
  learner_created: true
- name: resources/static/style.css
  visible: true
  text: |-
    body {
        background-color: lightgrey;
    }

    #chatbox {
        display: flex;
        flex-direction: column;
        border-style: solid;
        width: 600px;
        height: 400px;
        margin-left: auto;
        margin-right: auto;
        overflow-y: scroll;
    }

    #input-message {
        margin-top: auto;
        display: flex;
        flex-wrap: wrap;
    }

    #input-msg {
        position: relative;
        width: 95%;
    }

    #send-msg-btn {
        border: none;
        padding: 0px;
        background: none;
    }

    #send-msg-btn:hover {
        color: yellow;
    }

    button:active {
        color: yellow;
    }

    #messages {
        overflow-y: scroll;
    }

    #title-section {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .messenger-title {
        color: rgb(224, 9, 9);
        font-family:Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
        font-weight: bold;
    }

    .messenger-title-description {
        margin-left: 5px;
        color: blue;
        font-size: larger;
        font-style: italic;
    }
  learner_created: true
- name: resources/static/logic.js
  visible: true
  text: |-
    //Variable for chatbox
    const chatbox = document.getElementById("chatbox");

    //Variable for Messages container
    const messageContainer = document.getElementById("messages");

    //Variable to manage the button
    const buttonSend = document.getElementById("send-msg-btn");

    //Variable for the input text
    const messageInput = document.getElementById("input-msg");

    //Grab the text inside the input text and return it
    function getMessage() {
        let message = messageInput.value;

        return message;
    }

    //Function to create a div with id message to put it inside the messages container,
    //it will contain text that was previously on the input text
    function sendMessage() {
        const messageSent = document.createElement("div");
        const horizontalLine = document.createElement("hr");

        //Assigning the message value to the messageSent and changing some values to the text
        messageSent.textContent = getMessage();
        messageSent.style.padding = "5px";
        messageSent.style.fontFamily = "Comic Sans MS";
        messageSent.scrollIntoView({"behavior": "smooth"});

        messageSent.setAttribute("class", "message");

        //If the message is empty, cancel everything and dont add it to the chat
        if (messageSent.textContent == "") {
            return;
        }

        messageContainer.appendChild(messageSent);
        messageContainer.appendChild(horizontalLine);
    }

    //To clear the text from the input text - where the messages are written
    function clearInputText() {
        messageInput.value="";
    }

    //Scroll to bottom
    function scrollToBottom() {
       messageContainer.scrollTop = messageContainer.scrollHeight;
    }

    //Create an event on click that involves the button and updating the message to the div
    //with id= 'messages'
    buttonSend.addEventListener("click", function () {
        sendMessage();
        clearInputText();
        scrollToBottom();
    })

    let stompClient = null;

    function connect() {
        const socket = new SockJS('/ws');
        stompClient = Stomp.over(socket);

        stompClient.connect({}, function () {
            stompClient.subscribe('/topic/messages', function (message) {
                showMessage(message.body);
            });
        });
    }

    function sendMessage() {
        const message = getMessage();
        stompClient.send('/app/message', {}, message);
    }

    function showMessage(message) {
        const messageSent = document.createElement("div");
        const horizontalLine = document.createElement("hr");

        messageSent.textContent = message;
        messageSent.style.padding = "5px";
        messageSent.style.fontFamily = "Comic Sans MS";

        messageSent.setAttribute("class", "message");

        messageContainer.appendChild(messageSent);
        messageContainer.appendChild(horizontalLine);
        scrollToBottom();
    }

    // Call connect() to establish the WebSocket connection
    connect();
  learner_created: true
- name: src/chat/WebSocketConfig.java
  visible: true
  text: |
    package chat;

    import org.springframework.context.annotation.Configuration;
    import org.springframework.messaging.simp.config.MessageBrokerRegistry;
    import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
    import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
    import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

    @Configuration
    @EnableWebSocketMessageBroker
    public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

        @Override
        public void registerStompEndpoints(StompEndpointRegistry registry) {
            registry.addEndpoint("/ws").withSockJS();
        }

        @Override
        public void configureMessageBroker(MessageBrokerRegistry registry) {
            registry.setApplicationDestinationPrefixes("/app");
            registry.enableSimpleBroker("/topic");
        }
    }
  learner_created: true
- name: resources/static/send-message-btn.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/24561#comment
status: Unchecked
record: -1
